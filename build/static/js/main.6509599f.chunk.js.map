{"version":3,"sources":["Components/Appbar.js","Components/row.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","Appbar","classes","react_default","a","createElement","className","AppBar","position","color","Toolbar","Typography","variant","Rows","props","TableRow","TableCell","component","scope","amount","type","date","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","preventDefault","info","parseFloat","state","toLocaleDateString","data","concat","toConsumableArray","setState","Date","_this2","TextField","value","onChange","evt","target","placeholder","Button","onClick","Paper","Table","TableHead","TableBody","map","row","filter","toLowerCase","reduce","total","Component","App","Components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6509599f.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1,\n  },\n});\n\nexport default function Appbar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherent\">\n            Line Charge Application\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst Rows = (props) => {\n  return(\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">$ {props.amount}</TableCell>\n      <TableCell>{props.type}</TableCell>\n      <TableCell>{props.date}</TableCell>\n    </TableRow>\n  );\n}\n\nexport default Rows;","import React, {Component} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Rows from './row';\nimport '../App.css'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      data: [],\n      amount: '',\n      type:'',\n    };\n  }\n\n  onSubmit = event => {\n    event.preventDefault();\n    const info = {\n      amount: parseFloat(this.state.amount,10), \n      type: this.state.type, \n      date:this.state.date.toLocaleDateString()\n    };\n    const data = [...this.state.data, info];\n    this.setState({\n      data: data,\n      amount:'',\n      type:''\n    });\n  };\n\n  render() {\n    return(\n      <div>\n        <h2>Today's Date is {this.state.date.toLocaleDateString()}.</h2>\n        <form>\n          <TextField\n            value={this.state.amount}\n            onChange={evt => this.setState({amount: evt.target.value})}\n            placeholder=\"Amount\"\n          />\n          <TextField\n            value={this.state.type} \n            onChange={evt => this.setState({type: evt.target.value})}\n            placeholder=\"Type\"\n          />\n          <Button\n            onClick={this.onSubmit}>Submit</Button>\n        </form>\n\n        <Paper className='Paper'>\n          <Toolbar>\n            <Typography variant='h6' color='primary'>CHARGE</Typography>\n          </Toolbar>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Amount</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Date</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.data.map((info) => \n                <Rows amount={info.amount} type={info.type} date={info.date}/>\n              )}\n            </TableBody>\n          </Table>\n        </Paper>\n\n        <Paper className='Paper'>\n          <Toolbar>\n            <Typography variant='h6' color='primary'>TOTALS BY TYPE</Typography>\n          </Toolbar>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Type</TableCell>\n                <TableCell>Amount</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <Rows \n                amount={this.state.data.filter(info => info.type.toLowerCase() === 'fee').reduce((total, info) => {\n                  return total += info.amount\n                }, 0)} \n                type='Fee'\n              />\n              <Rows \n                amount={this.state.data.filter(info => info.type.toLowerCase() === 'deposit').reduce((total, info) => {\n                  return total += info.amount\n                }, 0)} \n                type='Deposit'\n              />\n              <Rows \n                amount={this.state.data.filter(info => info.type.toLowerCase() === 'expense').reduce((total, info) => {\n                  return total += info.amount\n                }, 0)} \n                type='Expense'\n              />\n            </TableBody>\n          </Table>\n        </Paper>\n      </div>\n    );\n  }\n}\nexport default Form;","import React from 'react';\nimport Appbar from './Components/Appbar.js';\nimport Form from './Components/Form';\nimport './App.css';\n\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <Appbar />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}